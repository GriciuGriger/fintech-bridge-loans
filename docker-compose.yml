version: "3.9"

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: myapp-backend:latest
    container_name: backend
    ports:
      - "3000:3000"
    environment:
      # App
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-3000}
      # PostgreSQL (do użycia w aplikacji) - używamy nazw z backend/src/utils/database.ts
      POSTGRES_HOST: postgres
      POSTGRES_PORT: "5432"
      POSTGRES_DB: ${POSTGRES_DB:-app_db}
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app123}
      # Redis (do użycia w aplikacji)
      REDIS_HOST: redis
      REDIS_PORT: "6379"
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redispass}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      # W Alpine dostępny jest busybox'owy wget
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - app-net

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app_db}
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app123}
      # Opcjonalnie: ustawienia lokalizacyjne, lepsze sortowanie PL
      LANG: en_US.utf8
      LC_ALL: en_US.utf8
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-app} -d ${POSTGRES_DB:-app_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-net

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: >
      sh -c "redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-redispass}"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redispass}
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD:-redispass} ping | grep PONG"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - app-net

networks:
  app-net:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
